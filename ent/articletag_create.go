// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/joeymckenzie/realworld-go-kit/ent/article"
	"github.com/joeymckenzie/realworld-go-kit/ent/articletag"
	"github.com/joeymckenzie/realworld-go-kit/ent/tag"
)

// ArticleTagCreate is the builder for creating a ArticleTag entity.
type ArticleTagCreate struct {
	config
	mutation *ArticleTagMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (atc *ArticleTagCreate) SetCreateTime(t time.Time) *ArticleTagCreate {
	atc.mutation.SetCreateTime(t)
	return atc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (atc *ArticleTagCreate) SetNillableCreateTime(t *time.Time) *ArticleTagCreate {
	if t != nil {
		atc.SetCreateTime(*t)
	}
	return atc
}

// SetTagID sets the "tag_id" field.
func (atc *ArticleTagCreate) SetTagID(i int) *ArticleTagCreate {
	atc.mutation.SetTagID(i)
	return atc
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (atc *ArticleTagCreate) SetNillableTagID(i *int) *ArticleTagCreate {
	if i != nil {
		atc.SetTagID(*i)
	}
	return atc
}

// SetArticleID sets the "article_id" field.
func (atc *ArticleTagCreate) SetArticleID(i int) *ArticleTagCreate {
	atc.mutation.SetArticleID(i)
	return atc
}

// SetNillableArticleID sets the "article_id" field if the given value is not nil.
func (atc *ArticleTagCreate) SetNillableArticleID(i *int) *ArticleTagCreate {
	if i != nil {
		atc.SetArticleID(*i)
	}
	return atc
}

// SetArticle sets the "article" edge to the Article entity.
func (atc *ArticleTagCreate) SetArticle(a *Article) *ArticleTagCreate {
	return atc.SetArticleID(a.ID)
}

// SetTag sets the "tag" edge to the Tag entity.
func (atc *ArticleTagCreate) SetTag(t *Tag) *ArticleTagCreate {
	return atc.SetTagID(t.ID)
}

// Mutation returns the ArticleTagMutation object of the builder.
func (atc *ArticleTagCreate) Mutation() *ArticleTagMutation {
	return atc.mutation
}

// Save creates the ArticleTag in the database.
func (atc *ArticleTagCreate) Save(ctx context.Context) (*ArticleTag, error) {
	var (
		err  error
		node *ArticleTag
	)
	atc.defaults()
	if len(atc.hooks) == 0 {
		if err = atc.check(); err != nil {
			return nil, err
		}
		node, err = atc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArticleTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atc.check(); err != nil {
				return nil, err
			}
			atc.mutation = mutation
			if node, err = atc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(atc.hooks) - 1; i >= 0; i-- {
			if atc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (atc *ArticleTagCreate) SaveX(ctx context.Context) *ArticleTag {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *ArticleTagCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *ArticleTagCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *ArticleTagCreate) defaults() {
	if _, ok := atc.mutation.CreateTime(); !ok {
		v := articletag.DefaultCreateTime()
		atc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *ArticleTagCreate) check() error {
	if _, ok := atc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ArticleTag.create_time"`)}
	}
	return nil
}

func (atc *ArticleTagCreate) sqlSave(ctx context.Context) (*ArticleTag, error) {
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (atc *ArticleTagCreate) createSpec() (*ArticleTag, *sqlgraph.CreateSpec) {
	var (
		_node = &ArticleTag{config: atc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: articletag.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: articletag.FieldID,
			},
		}
	)
	if value, ok := atc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: articletag.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if nodes := atc.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articletag.ArticleTable,
			Columns: []string{articletag.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArticleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articletag.TagTable,
			Columns: []string{articletag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TagID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ArticleTagCreateBulk is the builder for creating many ArticleTag entities in bulk.
type ArticleTagCreateBulk struct {
	config
	builders []*ArticleTagCreate
}

// Save creates the ArticleTag entities in the database.
func (atcb *ArticleTagCreateBulk) Save(ctx context.Context) ([]*ArticleTag, error) {
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*ArticleTag, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArticleTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *ArticleTagCreateBulk) SaveX(ctx context.Context) []*ArticleTag {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *ArticleTagCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *ArticleTagCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}
