// Code generated by entc, DO NOT EDIT.

package follow

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/joeymckenzie/realworld-go-kit/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// FollowerID applies equality check predicate on the "follower_id" field. It's identical to FollowerIDEQ.
func FollowerID(v int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFollowerID), v))
	})
}

// FolloweeID applies equality check predicate on the "followee_id" field. It's identical to FolloweeIDEQ.
func FolloweeID(v int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFolloweeID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Follow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Follow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Follow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Follow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// FollowerIDEQ applies the EQ predicate on the "follower_id" field.
func FollowerIDEQ(v int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFollowerID), v))
	})
}

// FollowerIDNEQ applies the NEQ predicate on the "follower_id" field.
func FollowerIDNEQ(v int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFollowerID), v))
	})
}

// FollowerIDIn applies the In predicate on the "follower_id" field.
func FollowerIDIn(vs ...int) predicate.Follow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Follow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFollowerID), v...))
	})
}

// FollowerIDNotIn applies the NotIn predicate on the "follower_id" field.
func FollowerIDNotIn(vs ...int) predicate.Follow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Follow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFollowerID), v...))
	})
}

// FollowerIDIsNil applies the IsNil predicate on the "follower_id" field.
func FollowerIDIsNil() predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFollowerID)))
	})
}

// FollowerIDNotNil applies the NotNil predicate on the "follower_id" field.
func FollowerIDNotNil() predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFollowerID)))
	})
}

// FolloweeIDEQ applies the EQ predicate on the "followee_id" field.
func FolloweeIDEQ(v int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFolloweeID), v))
	})
}

// FolloweeIDNEQ applies the NEQ predicate on the "followee_id" field.
func FolloweeIDNEQ(v int) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFolloweeID), v))
	})
}

// FolloweeIDIn applies the In predicate on the "followee_id" field.
func FolloweeIDIn(vs ...int) predicate.Follow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Follow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFolloweeID), v...))
	})
}

// FolloweeIDNotIn applies the NotIn predicate on the "followee_id" field.
func FolloweeIDNotIn(vs ...int) predicate.Follow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Follow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFolloweeID), v...))
	})
}

// FolloweeIDIsNil applies the IsNil predicate on the "followee_id" field.
func FolloweeIDIsNil() predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFolloweeID)))
	})
}

// FolloweeIDNotNil applies the NotNil predicate on the "followee_id" field.
func FolloweeIDNotNil() predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFolloweeID)))
	})
}

// HasUserFollower applies the HasEdge predicate on the "user_follower" edge.
func HasUserFollower() predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserFollowerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserFollowerTable, UserFollowerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserFollowerWith applies the HasEdge predicate on the "user_follower" edge with a given conditions (other predicates).
func HasUserFollowerWith(preds ...predicate.User) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserFollowerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserFollowerTable, UserFollowerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserFollowee applies the HasEdge predicate on the "user_followee" edge.
func HasUserFollowee() predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserFolloweeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserFolloweeTable, UserFolloweeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserFolloweeWith applies the HasEdge predicate on the "user_followee" edge with a given conditions (other predicates).
func HasUserFolloweeWith(preds ...predicate.User) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserFolloweeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserFolloweeTable, UserFolloweeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Follow) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Follow) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Follow) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		p(s.Not())
	})
}
