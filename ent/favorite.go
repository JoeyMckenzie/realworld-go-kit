// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/joeymckenzie/realworld-go-kit/ent/article"
	"github.com/joeymckenzie/realworld-go-kit/ent/favorite"
	"github.com/joeymckenzie/realworld-go-kit/ent/user"
)

// Favorite is the model entity for the Favorite schema.
type Favorite struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// ArticleID holds the value of the "article_id" field.
	ArticleID int `json:"article_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FavoriteQuery when eager-loading is set.
	Edges FavoriteEdges `json:"edges"`
}

// FavoriteEdges holds the relations/edges for other nodes in the graph.
type FavoriteEdges struct {
	// ArticleFavorites holds the value of the article_favorites edge.
	ArticleFavorites *Article `json:"article_favorites,omitempty"`
	// UserFavorites holds the value of the user_favorites edge.
	UserFavorites *User `json:"user_favorites,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ArticleFavoritesOrErr returns the ArticleFavorites value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FavoriteEdges) ArticleFavoritesOrErr() (*Article, error) {
	if e.loadedTypes[0] {
		if e.ArticleFavorites == nil {
			// The edge article_favorites was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: article.Label}
		}
		return e.ArticleFavorites, nil
	}
	return nil, &NotLoadedError{edge: "article_favorites"}
}

// UserFavoritesOrErr returns the UserFavorites value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FavoriteEdges) UserFavoritesOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.UserFavorites == nil {
			// The edge user_favorites was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserFavorites, nil
	}
	return nil, &NotLoadedError{edge: "user_favorites"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Favorite) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case favorite.FieldID, favorite.FieldArticleID, favorite.FieldUserID:
			values[i] = new(sql.NullInt64)
		case favorite.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Favorite", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Favorite fields.
func (f *Favorite) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case favorite.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case favorite.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				f.CreateTime = value.Time
			}
		case favorite.FieldArticleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field article_id", values[i])
			} else if value.Valid {
				f.ArticleID = int(value.Int64)
			}
		case favorite.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				f.UserID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryArticleFavorites queries the "article_favorites" edge of the Favorite entity.
func (f *Favorite) QueryArticleFavorites() *ArticleQuery {
	return (&FavoriteClient{config: f.config}).QueryArticleFavorites(f)
}

// QueryUserFavorites queries the "user_favorites" edge of the Favorite entity.
func (f *Favorite) QueryUserFavorites() *UserQuery {
	return (&FavoriteClient{config: f.config}).QueryUserFavorites(f)
}

// Update returns a builder for updating this Favorite.
// Note that you need to call Favorite.Unwrap() before calling this method if this Favorite
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Favorite) Update() *FavoriteUpdateOne {
	return (&FavoriteClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Favorite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Favorite) Unwrap() *Favorite {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Favorite is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Favorite) String() string {
	var builder strings.Builder
	builder.WriteString("Favorite(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(f.CreateTime.Format(time.ANSIC))
	builder.WriteString(", article_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ArticleID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", f.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Favorites is a parsable slice of Favorite.
type Favorites []*Favorite

func (f Favorites) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
