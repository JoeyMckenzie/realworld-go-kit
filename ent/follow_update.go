// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/joeymckenzie/realworld-go-kit/ent/follow"
	"github.com/joeymckenzie/realworld-go-kit/ent/predicate"
	"github.com/joeymckenzie/realworld-go-kit/ent/user"
)

// FollowUpdate is the builder for updating Follow entities.
type FollowUpdate struct {
	config
	hooks    []Hook
	mutation *FollowMutation
}

// Where appends a list predicates to the FollowUpdate builder.
func (fu *FollowUpdate) Where(ps ...predicate.Follow) *FollowUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetFollowerID sets the "follower_id" field.
func (fu *FollowUpdate) SetFollowerID(i int) *FollowUpdate {
	fu.mutation.SetFollowerID(i)
	return fu
}

// SetNillableFollowerID sets the "follower_id" field if the given value is not nil.
func (fu *FollowUpdate) SetNillableFollowerID(i *int) *FollowUpdate {
	if i != nil {
		fu.SetFollowerID(*i)
	}
	return fu
}

// ClearFollowerID clears the value of the "follower_id" field.
func (fu *FollowUpdate) ClearFollowerID() *FollowUpdate {
	fu.mutation.ClearFollowerID()
	return fu
}

// SetFolloweeID sets the "followee_id" field.
func (fu *FollowUpdate) SetFolloweeID(i int) *FollowUpdate {
	fu.mutation.SetFolloweeID(i)
	return fu
}

// SetNillableFolloweeID sets the "followee_id" field if the given value is not nil.
func (fu *FollowUpdate) SetNillableFolloweeID(i *int) *FollowUpdate {
	if i != nil {
		fu.SetFolloweeID(*i)
	}
	return fu
}

// ClearFolloweeID clears the value of the "followee_id" field.
func (fu *FollowUpdate) ClearFolloweeID() *FollowUpdate {
	fu.mutation.ClearFolloweeID()
	return fu
}

// SetUserFollowerID sets the "user_follower" edge to the User entity by ID.
func (fu *FollowUpdate) SetUserFollowerID(id int) *FollowUpdate {
	fu.mutation.SetUserFollowerID(id)
	return fu
}

// SetNillableUserFollowerID sets the "user_follower" edge to the User entity by ID if the given value is not nil.
func (fu *FollowUpdate) SetNillableUserFollowerID(id *int) *FollowUpdate {
	if id != nil {
		fu = fu.SetUserFollowerID(*id)
	}
	return fu
}

// SetUserFollower sets the "user_follower" edge to the User entity.
func (fu *FollowUpdate) SetUserFollower(u *User) *FollowUpdate {
	return fu.SetUserFollowerID(u.ID)
}

// SetUserFolloweeID sets the "user_followee" edge to the User entity by ID.
func (fu *FollowUpdate) SetUserFolloweeID(id int) *FollowUpdate {
	fu.mutation.SetUserFolloweeID(id)
	return fu
}

// SetNillableUserFolloweeID sets the "user_followee" edge to the User entity by ID if the given value is not nil.
func (fu *FollowUpdate) SetNillableUserFolloweeID(id *int) *FollowUpdate {
	if id != nil {
		fu = fu.SetUserFolloweeID(*id)
	}
	return fu
}

// SetUserFollowee sets the "user_followee" edge to the User entity.
func (fu *FollowUpdate) SetUserFollowee(u *User) *FollowUpdate {
	return fu.SetUserFolloweeID(u.ID)
}

// Mutation returns the FollowMutation object of the builder.
func (fu *FollowUpdate) Mutation() *FollowMutation {
	return fu.mutation
}

// ClearUserFollower clears the "user_follower" edge to the User entity.
func (fu *FollowUpdate) ClearUserFollower() *FollowUpdate {
	fu.mutation.ClearUserFollower()
	return fu
}

// ClearUserFollowee clears the "user_followee" edge to the User entity.
func (fu *FollowUpdate) ClearUserFollowee() *FollowUpdate {
	fu.mutation.ClearUserFollowee()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FollowUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FollowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FollowUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FollowUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FollowUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FollowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   follow.Table,
			Columns: follow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: follow.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fu.mutation.UserFollowerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   follow.UserFollowerTable,
			Columns: []string{follow.UserFollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UserFollowerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   follow.UserFollowerTable,
			Columns: []string{follow.UserFollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.UserFolloweeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   follow.UserFolloweeTable,
			Columns: []string{follow.UserFolloweeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UserFolloweeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   follow.UserFolloweeTable,
			Columns: []string{follow.UserFolloweeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{follow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FollowUpdateOne is the builder for updating a single Follow entity.
type FollowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FollowMutation
}

// SetFollowerID sets the "follower_id" field.
func (fuo *FollowUpdateOne) SetFollowerID(i int) *FollowUpdateOne {
	fuo.mutation.SetFollowerID(i)
	return fuo
}

// SetNillableFollowerID sets the "follower_id" field if the given value is not nil.
func (fuo *FollowUpdateOne) SetNillableFollowerID(i *int) *FollowUpdateOne {
	if i != nil {
		fuo.SetFollowerID(*i)
	}
	return fuo
}

// ClearFollowerID clears the value of the "follower_id" field.
func (fuo *FollowUpdateOne) ClearFollowerID() *FollowUpdateOne {
	fuo.mutation.ClearFollowerID()
	return fuo
}

// SetFolloweeID sets the "followee_id" field.
func (fuo *FollowUpdateOne) SetFolloweeID(i int) *FollowUpdateOne {
	fuo.mutation.SetFolloweeID(i)
	return fuo
}

// SetNillableFolloweeID sets the "followee_id" field if the given value is not nil.
func (fuo *FollowUpdateOne) SetNillableFolloweeID(i *int) *FollowUpdateOne {
	if i != nil {
		fuo.SetFolloweeID(*i)
	}
	return fuo
}

// ClearFolloweeID clears the value of the "followee_id" field.
func (fuo *FollowUpdateOne) ClearFolloweeID() *FollowUpdateOne {
	fuo.mutation.ClearFolloweeID()
	return fuo
}

// SetUserFollowerID sets the "user_follower" edge to the User entity by ID.
func (fuo *FollowUpdateOne) SetUserFollowerID(id int) *FollowUpdateOne {
	fuo.mutation.SetUserFollowerID(id)
	return fuo
}

// SetNillableUserFollowerID sets the "user_follower" edge to the User entity by ID if the given value is not nil.
func (fuo *FollowUpdateOne) SetNillableUserFollowerID(id *int) *FollowUpdateOne {
	if id != nil {
		fuo = fuo.SetUserFollowerID(*id)
	}
	return fuo
}

// SetUserFollower sets the "user_follower" edge to the User entity.
func (fuo *FollowUpdateOne) SetUserFollower(u *User) *FollowUpdateOne {
	return fuo.SetUserFollowerID(u.ID)
}

// SetUserFolloweeID sets the "user_followee" edge to the User entity by ID.
func (fuo *FollowUpdateOne) SetUserFolloweeID(id int) *FollowUpdateOne {
	fuo.mutation.SetUserFolloweeID(id)
	return fuo
}

// SetNillableUserFolloweeID sets the "user_followee" edge to the User entity by ID if the given value is not nil.
func (fuo *FollowUpdateOne) SetNillableUserFolloweeID(id *int) *FollowUpdateOne {
	if id != nil {
		fuo = fuo.SetUserFolloweeID(*id)
	}
	return fuo
}

// SetUserFollowee sets the "user_followee" edge to the User entity.
func (fuo *FollowUpdateOne) SetUserFollowee(u *User) *FollowUpdateOne {
	return fuo.SetUserFolloweeID(u.ID)
}

// Mutation returns the FollowMutation object of the builder.
func (fuo *FollowUpdateOne) Mutation() *FollowMutation {
	return fuo.mutation
}

// ClearUserFollower clears the "user_follower" edge to the User entity.
func (fuo *FollowUpdateOne) ClearUserFollower() *FollowUpdateOne {
	fuo.mutation.ClearUserFollower()
	return fuo
}

// ClearUserFollowee clears the "user_followee" edge to the User entity.
func (fuo *FollowUpdateOne) ClearUserFollowee() *FollowUpdateOne {
	fuo.mutation.ClearUserFollowee()
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FollowUpdateOne) Select(field string, fields ...string) *FollowUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Follow entity.
func (fuo *FollowUpdateOne) Save(ctx context.Context) (*Follow, error) {
	var (
		err  error
		node *Follow
	)
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FollowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FollowUpdateOne) SaveX(ctx context.Context) *Follow {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FollowUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FollowUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FollowUpdateOne) sqlSave(ctx context.Context) (_node *Follow, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   follow.Table,
			Columns: follow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: follow.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Follow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, follow.FieldID)
		for _, f := range fields {
			if !follow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != follow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fuo.mutation.UserFollowerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   follow.UserFollowerTable,
			Columns: []string{follow.UserFollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UserFollowerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   follow.UserFollowerTable,
			Columns: []string{follow.UserFollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.UserFolloweeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   follow.UserFolloweeTable,
			Columns: []string{follow.UserFolloweeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UserFolloweeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   follow.UserFolloweeTable,
			Columns: []string{follow.UserFolloweeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Follow{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{follow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
